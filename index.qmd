---
title: "<br><br><br>Introduction to Git and GitHub in RStudio"
subtitle: "<br>Diego P.F. Trindade"
author: "Researcher at the Macroecology workgroup"
date: "today"
date-format: long
format: 
  revealjs:
    css: "adjust.css"
    width: 1600
    height: 900
    slide-number: false
    chalkboard: true
    theme: ["dark", "styles.scss"]
    echo: true
    multiplex: true
    code-link: true
    code-copy: true
    auto-play-media: false
    preview-links: auto
    title-slide-attributes:
      #data-background-color: "#447099"
      data-background-image: "../images/ut_logo.svg, ../images/macroeco_logo.png"
      data-background-size: 120px, 300px, cover
      data-background-position: "2% 2%, 98% 5%, center"
editor: source
---



## Before we start...
* PLANTECOLOGY RULES!

* Everyone has a github account

*  RStudio and Git are connected

:::fragment
  
::: {style="font-size:46px"}

```
- If not:

#install.packages("usethis")

usethis::use_git_config(user.name = "yourusername", user.email = "youremail@example.xx")

usethis::create_github_token()

#Copy your PAT

#Run the following line and paste it:

gitcreds::gitcreds_set()

```
::: 

:::


# [Laelatu meeting: <br>Macroecological data and data science]{style="color:#C8F526;font-size:86px"} {background-image="./images/springWG.jpeg" background-opacity="0.3"}


## Not an advanced course

![](./images/gitmeme.png){.absolute top="100" left="450" width="650" height="1800"}


## Git(Hub) in a nutshell {background-image="./images/git-commit.png" background-opacity="0.15"}

::: columns
::: {.column width="10%"}
![](https://git-scm.com/images/logos/downloads/Git-Logo-1788C.svg){.absolute top="180" left="0" width="200" height="250"}

![](./images/github-mark-white.png){.absolute bottom="250" left="40" width="150" height="150"}
:::

::: {.column width="7%"}
:::

::: {.column width="65%"}
<br><br><br>

Git is a version control software that **tracks changes** to your files over time.

<br><br><br>

Github is a website for your git-versioned files.
:::

::: {.column width="15%"}
::: footer
::: {style="text-align:right;"}
[Illustration: Alisson Horst](https://allisonhorst.com/git-github)
:::
:::
:::
:::


## I use R + DropBox, why should I care?

::: columns
::: {.column width="20%"}
:::

::: {.column width="80%"}
<br><br> <iframe src="https://giphy.com/embed/pPhyAv5t9V8djyRFJH" width="880" height="550" frameBorder="1" class="giphy-embed" allowFullScreen></iframe>

<p><a href="https://giphy.com/gifs/wtf-obama-wth-pPhyAv5t9V8djyRFJH"></a></p>
:::
:::

## Something like this can happen

![](./images/files-comics.gif){.absolute top="200" left="350" width="850" height="600"}

## Veryfinal_Version2

<br>
<br>

![](./images/phd-comics-version-control.png){fig-align="center"}



# [Reproducibility and Version Control]{style="color:yellow;"} {background-image="./images/reprod.jpeg" background-opacity="0.2"}

::: footer
::: {style="text-align:right;"}
[Illustration: Robert Neubecker](https://www.science.org/doi/10.1126/science.354.6308.142)
:::
:::

## How does Git work?

<br>
<br>

![](./images/basic-git.jpeg){fig-align="center"}

## How does Git work?


<br>
<br>

![](./images/versions.png){fig-align="center"}

------------------------------------------------------------------------

{{< video https://www.youtube.com/watch?v=s3JldKoA0zw&t=4s&ab_channel=HomerWhite start="4" width="100%" height="100%" >}}


## Why using Git?

- Several backups of your work!

- Keep track of all changes, and go back in time if necessary;

- Easy to share your work with others (papers, analyses, functions, packages);

- Work in collaboration (branches, issues, pull requests).


## Why Git + RStudio?

-   Most ecologists use R;

-   RStudio has an easy and well-connected interface with GitHub;

-   Repository/Projects;

-   GitHub act as a "preprint" for R packages or functions.


## Potential drawbacks

- Allows files up to 100mb;

- Simultaneous changes can be problematic;

- GitHub demons are always awaiting to be summoned.


# Git can be used by yourself or as a team


## Introvert git user

-   You manage your projects alone (on one or multiple machines);

-   You commit, push and pull your own changes (keep track of your changes);

-   It is still fun and safe!


![](./images/basic-git.jpeg){fig-align="center"}



# [Let's make a quick tour]{style="color:#C8F526;"} {background-image="./images/workflow.png" background-opacity="0.3"}

::: footer
::: {style="text-align:right;"}
[Illustration: Alisson Horst](https://allisonhorst.com/git-github)
:::
:::


## Let's see how it works in practice


-   Creating a new repository;


-   Connecting this repository to RStudio


## Let's see how it works in practice


-  From GitHub to RStudio

-  From local computer to GitHub

-  Using command line

## Let's see how it works in practice


-  [From GitHub to RStudio]{style="color:#F4BA02;"};

-  From local computer to GitHub;

-  Using command line.


## 1^st^ task - let's create our first repository


- Creating a new repository on GitHub;

- Creating a new project in RStudio using version control;

- Cloning your GitHub repository and connecting it to RStudio.

::: fragment
::: {.callout-warning}

+ **Let's work locally**. Don't use DropBox, Onedrive, GoogleDrive.

:::
:::

::: {.notes}

- README, gitignore,

:::


## From the command line


:::{style="font-size:48px;"}


```
create a repository on github

go to the terminal and choose your folder (cd path)

echo "# My project's README" >> README.md
  git init
  git add .
  git commit -m "first commit"
  git branch -M main
  git remote add origin <repolink>
  git push -u origin main
  

```

:::



# First GitHub's power - Version control


## Version control


- Let's create some scripts, edit and save them, commit and push;

- Repeat this process and check what happens.


## Git pannel anatomy

<br>

![](./images/git_tab.png){fig-align="center"}

::: footer
::: {style="text-align:right;"}
[Image: Olivier Gimenez](https://oliviergimenez.github.io/reproducible-science-workshop/slides/1_github.html#13)
:::
:::


## 2^nd^ task - Create a project you are currently working on

- Create a repository on GitHub;

- Clone it and make a new project in RStudio;

- Copy and paste your folders/scripts into this new projects' folder.

::: fragment

- [If you have large data files (>100mb):]{style="font-size:38px; color:red"}

  + [You can try using .RData, .RDS or zip files instead (if they don't exceed 100mb);]{style="font-size:32px"}

  + [Or even, you can use large files locally and .gitignore them!]{style="font-size:32px"}

:::

## Cloning public repositories

- Public GitHub repositories can also be cloned;

- A nice strategy to learn new things;

- Very convenient when reviewing papers that use GitHub!



## 3^rd^ task - Cloning a repository

- Let's try to Clone a nice repository on GitHub.

::: fragment

- Now, make any change to this project, commit and try to push it.

::: 

::: fragment

::: {style="font-size:48px"}

::: {.callout-warning}

I hope that a wild error appeared!

::: 
::: 
::: 

## Clone and Fork

- Clone: creates a local version of the original repository;

- Fork: creates a copy of the repository on your GitHub (which you can then clone);

- More advanced users use that approach to improve someone's package/functions.

::: fragment

- Let's now try to fork and then clone the same repository.

:::

# How to collaborate using git

## Collaborative git

::: fragment
#### "Always PULL first!"
:::

![](./images/GitHub-diagram.jpeg){fig-align="center"}


::: {.notes}
- Workgroup example
:::

## Issues can/will appear!

<iframe src="https://giphy.com/embed/MCZ39lz83o5lC" width="1080" height="850" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/MCZ39lz83o5lC"></a></p>



## Dealing with some simple/common issues

<br>

### 1st issue:

- Go to GitHub, create a new repository, connect it to RStudio and invite a collaborator (person next to you);

- **Ask him/her to change a file and push it.**

- Now, don't pull the changes and try to make new changes to the same file and commit/push it yourself.

::: fragment


::: {.callout-warning}

I hope that a wild error appeared!

::: 
::: 


## Why?


<br>

::: {.callout-important}

::: {style="font-size:42px"}

**Always PULL first!**
:::

:::


## 2nd issue:

- **Ask your collaborator to change a file and "forget" to commit or push it**;

- Change the same file yourself (either add or remove anything), commit and push it;

- Ask your collaborator to commit and push his/her changes.


## Most simple issues can be solved with "Pull"

- Sometimes not though;

- [Oh Shit Git!](https://ohshitgit.com/), [StackOverflow](https://stackoverflow.com/) and [ChatGPT](https://openai.com/blog/chatgpt) are our friends


# Git allow us to test new things safely: [Branches!]{style="color:red;"}


## Let's try some branch approaches

- Branches can be viewed as experiments;

- Useful when working in collaboration but also alone;


![](./images/git-branches.png){fig-align="center"}


## Working as a team with branches

- Pull the changes;

- Create a new branch;

- Create a new script inside of this branch and work on it;

- Push the changes and check your repository on GitHub;


:::fragment

- New Feature: [Pull request]{style="color:red;"}

:::

## Mergin conflicts

- When two people work in separate branches but in the same file, conflicts will happen.

  - You and your colleague will create a new branch;

  - You both will work on the same script but in separate branches;

  - Push the changes and check your repository on GitHub;

## Working alone with branches

- The same can be done when working alone


![](./images/git-branches.png){fig-align="center"}

## Issues + Pull request

- This is how data science is being pushed forward;

- Great feature when working as a team;

- Let's try to create some issues and solve them.


# That's it! The basic toolkit to start using git is ready


# Additional tips 

## A few commands that can save us

::: fragment
#### "Always PULL first!"
:::

-   I committed something that should not be committed:

    -   git HEAD\~soft


- How to go back in time?


    - git revert <SHA> or make a new branch on GitHub page using SHA


# Group task

## Let's create small groups

- Group 1: Survey of birds that visit backyards, nature centers, community areas, and other locales in North America;

- Group 2: Erasmus student data;

- Group 3: Bee colonies in the US;

- Group 4: Baby names over time;

- Group 5: Palmer penguins data.



## 1^st^ Group task:

- Let's explore the data/scripts, make changes, commit and push

- Each person changes a specific file (no overlap!)

- You can either communicate saying when you pushed so the other person can pull the changes

- You can also choose not saying anything. Your teammates will receive an error, but since you are working on different files they just need to pull the changes and everything will be fine;

- All collaborators change, commit and push their changes and solve the conflicts (which will be solved simply by clicking pull - I hope)

## 2^nd^ Group task:

- Let's continue making changes but now using branches.

- Each person creates a branch (maybe using his/her name)

- Let's keep working each person in a different script

- Make changes and pull requests



## 3^rd^ Group task:

- Let's try to create some conflicts and learn how to solve them.

- Now, two persons will work on the same script

- To make things less complicated, each person changes a simple thing (e.g. the label of a plot)

- They push and try to pull request their changes (and solve the conflicts that will appear)


## 4^th^ Group task

- Let's create issues and ask collaborators to solve them.

- Remember to use the # linked to the issue



## Take-home messages

- I hope you agree that git is a great tool for both using it alone or as a team;

- When used in collaborations, communication is key;

- All git issues can be solved;

- If not, or too complicated, just burn it down and continue from where it was working previously.

----

::: {.column width="15%"}

:::

<iframe src="https://giphy.com/embed/xUPOqo6E1XvWXwlCyQ" width="1080" height="870" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/spacejam-space-jam-movie-xUPOqo6E1XvWXwlCyQ"></a></p>


## Sources

-   How to connect Git and RStudio, and more complex stuff: [Happy Git With R](https://happygitwithr.com/index.html)

-   How to solve the most common issues: [Oh Shit Git!](https://ohshitgit.com/)

-   Important notes: [click here](https://raw.githack.com/uo-ec607/lectures/master/02-git/02-Git.html#1)

-   Tips on how to collaborate on Rstudio with Git: [click here](https://jtr13.github.io/cc21/collaborating-on-rstudio-with-github.html)
